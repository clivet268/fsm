#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 399 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 0 81 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 66 4 117 0 0 0 -1 -1
2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 66 4 117 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 11 166 154 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 11 166 154 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 194 5 166 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 194 5 166 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 151 0 151 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 151 0 151 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 0 0 0 0 -1 -1
2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 255 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 89 0 89 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0 0 0 255 255 255 198 121
249 -1 -1 2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0 0 0 255 255 255 198 121
249 -1 -1 4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0 0 0 255 255 255 128 128
192 -1 -1 2 38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0 0 0 255 255 255 128 128
192 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 255 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 255 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 128 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 128 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 184 113
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 128 64 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 255 128
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 128
0 0 0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 48 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 115 115 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 179 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 0 64 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 160 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 28 181 142 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 181 0 90 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 162 0 162 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 6 75 159 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 189 189 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 64 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 64 0 64 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 128 0 64 199
163 196 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 128 0 64 198
166 200 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 31 #"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 41 #"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 37 #"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 38 #"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 34 #"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 35 #"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 35 #"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 8 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 8 24 #"drscheme:text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 28 #"drscheme:check-syntax:set!d\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 0 1 #"\0"
0 75 15 #"Lucida Console\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 225 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 19 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 15 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 15 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 14 #"Html Standard\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 249 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
2.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 -2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 -2 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 -1 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 249 1 #"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 3 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 3 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 90 -1 3 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 0 1 #"\0"
0 70 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 173
216 230 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 173
216 230 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 16 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 16 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 26 #" Bitstream Vera Sans Mono\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 8 #"Courier\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 224 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 225 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 225 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 90 22 0
0 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 15 #"Lucida Console\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 97 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 130 72 32 0
0 0 -1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 25 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 249 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 249 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 8 #"Courier\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 8 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
255 255 255 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92
255 255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92
255 255 255 -1 -1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92
255 255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 205 92 92 0
0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
255 255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92
255 255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
255 255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 21 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 8 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 238
232 236 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
128 64 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 0 81 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 89 0 89 0 0
0 -1 -1           0 2449 0 27 3 1 #"("
0 0 16 3 6 #"module"
0 0 27 3 1 #" "
0 0 14 3 17 #"grammar-predicate"
0 0 27 3 1 #" "
0 0 14 3 6 #"racket"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 15 #"\"constants.rkt\""
0 0 27 3 1 #" "
0 0 20 3 21 #"\"grammar-getters.rkt\""
0 0 27 3 1 #" "
0 0 20 3 9 #"\"csg.rkt\""
0 0 27 3 1 #" "
0 0 20 3 9 #"\"cfg.rkt\""
0 0 27 3 1 #" "
0 0 20 3 21 #"\"regular-grammar.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 27 3 1 #" "
0 0 14 3 14 #"valid-grammar?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 48 #";valid-grammar?: grammar --> true/listof strings"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 48 #";purpose: to determine the validity of a grammar"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"valid-grammar?"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 9         289 23           0 0           0 47 0 14 3 5 #"Table"
0 0 27 3 1 #" "
0 0 14 3 2 #"of"
0 0 27 3 1 #" "
0 0 14 3 8 #"Contents"
0 0 27 29 1 #"\n"
0 0 14 3 1 #"o"
0 0 27 3 2 #"  "
0 0 14 3 9 #"Constants"
0 0 27 29 1 #"\n"
0 0 14 3 1 #"o"
0 0 27 3 2 #"  "
0 0 14 3 8 #"Auxilary"
0 0 27 3 1 #" "
0 0 14 3 9 #"functions"
0 0 27 3 1 #" "
0 0 14 3 3 #"and"
0 0 27 3 1 #" "
0 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 12 #"Abstractions"
0 0 27 29 1 #"\n"
0 0 14 3 1 #"o"
0 0 27 3 2 #"  "
0 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 6 #"Checks"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";     V checks"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";     Sigma checks"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";     Rules checks"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";     Start checks"
0 0 27 29 1 #"\n"
0 0 14 3 1 #"o"
0 0 27 3 1 #" "
0 0 14 3 11 #"Specialized"
0 0 27 3 1 #" "
0 0 14 3 6 #"Checks"
0 0 27 29 1 #"\n"
0 0 18 3 22 #";     Regular grammars"
0 0 27 29 1 #"\n"
0 0 18 3 27 #";     Context-Free grammars"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";     Context-Sensitive grammars"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 27 3 2 #") "
0 0 20 3 3 #"\" \""
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                        ("
0 0 14 3 13 #"string-append"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 40 #"                                       ("
0 0 14 3 13 #"string-append"
0 0 27 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 29 1 #"\n"
0 0 20 3 1 #"\""
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 14 3 12 #"format-error"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                  "
0 0 23 3 2 #"#t"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          73 23           0 0           0 11 0 14 3 9 #"Constants"
0 0 27 29 1 #"\n"
0 0 18 3 6 #";    V"
0 0 27 29 1 #"\n"
0 0 18 3 10 #";    sigma"
0 0 27 29 1 #"\n"
0 0 18 3 10 #";    rules"
0 0 27 29 1 #"\n"
0 0 18 3 10 #";    start"
0 0 27 29 1 #"\n"
0 0 18 3 9 #";    type"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 2 #" ("
0 0 14 3 14 #"grammar-getnts"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 2 #" ("
0 0 14 3 19 #"grammar-getalphabet"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"start"
0 0 27 3 2 #" ("
0 0 14 3 16 #"grammar-getstart"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 2 #" ("
0 0 14 3 15 #"grammar-gettype"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"rules"
0 0 27 3 2 #" ("
0 0 14 3 16 #"grammar-getrules"
0 0 27 3 1 #" "
0 0 14 3 9 #"a-grammar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          97 23           0 0           0 15 0 14 3 8 #"Auxilary"
0 0 27 3 1 #" "
0 0 14 3 9 #"functions"
0 0 27 3 1 #" "
0 0 14 3 3 #"and"
0 0 27 3 1 #" "
0 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 12 #"Abstractions"
0 0 27 29 1 #"\n"
0 0 18 3 13 #";     member?"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";     return-repetitions"
0 0 27 29 1 #"\n"
0 0 18 3 16 #";     valid-set?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 47 #";member?: element (listof elements) --> boolean"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 55 #";purpose: determine if an element is a member of a list"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 10 #"an-element"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 2 #") "
0 0 14 3 5 #"false"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 2 #") "
0 0 14 3 10 #"an-element"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 10 #"an-element"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 68
#";return-repetitions: listof elements --> two-listof (listof symbols)"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 75
(
 #";purpose: seperate repetitions out into their own list where the fir"
 #"st list"
) 0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 72
(
 #";            has no repetitions and the second list contains the rep"
 #"eats"
) 0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 18 #"return-repetitions"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 5 #"local"
0 0 27 3 2 #" ["
0 0 18 3 67
#";make-lists: (listof symbols) (listof symbols) (listof symbols) -->"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 40 #";            two-listof (listof symbols)"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 74
(
 #";Accumulator invariant: no-reps: accumulates unique elements from th"
 #"e list"
) 0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 79
(
 #";Accumulator invariant: repetitions: accumulates any repeated elemen"
 #"ts on their"
) 0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 57 #";                                    second+ appearances."
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"make-lists"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 1 #" "
0 0 14 3 7 #"no-reps"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                        ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"no-reps"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                              [("
0 0 14 3 7 #"member?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 4 #")) ("
0 0 14 3 10 #"make-lists"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 78
(
 #"                                                                    "
 #"          "
) 0 0 14 3 7 #"no-reps"
0 0 27 29 1 #"\n"
0 0 27 3 79
(
 #"                                                                    "
 #"          ("
) 0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 2 #") "
0 0 14 3 11 #"repetitions"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"make-lists"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"main"
0 0 27 3 2 #") "
0 0 14 3 7 #"no-reps"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 48 #"                                                "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                              ))"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ]"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 10 #"make-lists"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 27 3 1 #" "
0 0 14 3 5 #"empty"
0 0 27 3 1 #" "
0 0 14 3 5 #"empty"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 82
(
 #";valid-set?: listof symbols (symbol -> true/string) symbol --> true/"
 #"listof strings"
) 0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 52 #";purpose: an abstractions of valid-V and valid-sigma"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"valid-set?"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-set"
0 0 27 3 1 #" "
0 0 14 3 7 #"checker"
0 0 27 3 1 #" "
0 0 14 3 8 #"checking"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #" ("
0 0 14 3 18 #"return-repetitions"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-set"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"unique-elems"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"errors"
0 0 27 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 27 3 1 #" "
0 0 14 3 7 #"string?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 7 #"checker"
0 0 27 3 1 #" "
0 0 14 3 12 #"unique-elems"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 29 #"                            ("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 6 #"errors"
0 0 27 3 3 #")) "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 24 #"                      [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #") "
0 0 14 3 6 #"errors"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 24 #"                      [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 6 #"errors"
0 0 27 3 3 #") ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 41 #"\"the symbols ~s cannot be repeated in ~s\""
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 1 #" "
0 0 14 3 8 #"checking"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 41 #"\"the symbols ~s cannot be repeated in ~s\""
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 1 #" "
0 0 14 3 8 #"checking"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 0 14 3 6 #"errors"
0 0 27 3 5 #")])))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          49 23           0 0           0 7 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 7 #"Checks:"
0 0 27 3 1 #" "
0 0 14 3 5 #"start"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";  valid-start?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 37 #";valid-start?: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 74
(
 #";purpose: to see if a starting nonterminal is a valid starting nonte"
 #"rminal"
) 0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"valid-start?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-start"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-start"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 47 #"\"~s must be in V to be a valid starting symbol\""
0 0 27 3 1 #" "
0 0 14 3 7 #"a-start"
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          61 23           0 0           0 9 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 7 #"Checks:"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 29 1 #"\n"
0 0 18 3 11 #";  valid-V?"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";  valid-for-V?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 49 #";valid-V?: listof symbols --> true/listof strings"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 72
(
 #";purpose: to see if a set of upper case terminal and nonterminal sym"
 #"bols"
) 0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 28 #";         is a valid set 'V'"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"valid-V?"
0 0 27 3 1 #" "
0 0 14 3 3 #"a-V"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 5 #"local"
0 0 27 3 2 #" ["
0 0 18 3 37 #";valid-for-v?: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 71
(
 #";purpose: to determine the validity of a non-terminal or terminal fo"
 #"r V"
) 0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"valid-for-v?"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                        ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"symbol?"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 3 #") ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"case?"
0 0 27 3 2 #" ("
0 0 14 3 16 #"char-upper-case?"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"length?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 18 #"valid-fsm-vsymbol?"
0 0 27 3 1 #" "
0 0 14 3 6 #"lochar"
0 0 27 3 2 #") "
0 0 18 3 16 #"; added by Marco"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 6 #"lochar"
0 0 27 3 2 #") "
0 0 23 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 66
#"                                                                 ("
0 0 14 3 16 #"char-upper-case?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 6 #"lochar"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 66
#"                                                                 ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 6 #"lochar"
0 0 27 3 2 #") "
0 0 23 3 3 #"#\\-"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 66
#"                                                                 ("
0 0 14 3 6 #"andmap"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 2 #"ch"
0 0 27 3 3 #") ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 2 #">="
0 0 27 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 27 3 1 #" "
0 0 14 3 2 #"ch"
0 0 27 3 2 #") "
0 0 23 3 2 #"48"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 92
(
 #"                                                                    "
 #"                       ("
) 0 0 14 3 2 #"<="
0 0 27 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 27 3 1 #" "
0 0 14 3 2 #"ch"
0 0 27 3 2 #") "
0 0 23 3 2 #"57"
0 0 27 3 4 #"))) "
0 0 18 3 30 #"; check if they are all digits"
0 0 27 29 1 #"\n"
0 0 27 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 4 #"cddr"
0 0 27 3 1 #" "
0 0 14 3 6 #"lochar"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 28 #"valid-fsm-generate-V-symbol?"
0 0 27 3 2 #" ("
0 0 14 3 18 #"valid-fsm-vsymbol?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 3 #") ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 59
#"\"~s cannot be included in V becuase it is the empty symbol\""
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                          [("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 3 #"and"
0 0 27 3 1 #" "
0 0 14 3 5 #"case?"
0 0 27 3 1 #" "
0 0 14 3 7 #"length?"
0 0 27 3 3 #") ("
0 0 14 3 18 #"valid-fsm-vsymbol?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 27 3 2 #"] "
0 0 18 3 16 #"; Added by Marco"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ["
0 0 14 3 5 #"case?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 42 #"\"~s must be of length 1 to be valid for V\""
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ["
0 0 14 3 7 #"length?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"~s must be uppercase to be valid for V\""
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 67
(
 #"\"~s must be completely uppercase "
 #"and of length 1 to be valid for V\""
) 0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 5 #")]))]"
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 39 #"\"~s must be a symbol to be valid for V\""
0 0 27 3 1 #" "
0 0 14 3 8 #"a-symbol"
0 0 27 3 5 #")]))]"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"a-V"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"valid-set?"
0 0 27 3 1 #" "
0 0 14 3 3 #"a-V"
0 0 27 3 1 #" "
0 0 14 3 12 #"valid-for-v?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"V"
0 0 27 3 5 #")])))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          61 23           0 0           0 9 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 7 #"Checks:"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";  valid-sigma?"
0 0 27 29 1 #"\n"
0 0 18 3 19 #";  valid-for-sigma?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 53 #";valid-sigma?: listof symbols --> true/listof strings"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 73
(
 #";purpose: to see if a set of lower case terminal symbols is a valid "
 #"sigma"
) 0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"valid-sigma?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-sigma"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 5 #"local"
0 0 27 3 2 #" ["
0 0 18 3 41 #";valid-for-sigma?: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 57 #";purpose: to determine the validity of a symbol for sigma"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"valid-for-sigma?"
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                        ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"symbol?"
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 3 #") ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"case?"
0 0 27 3 2 #" ("
0 0 14 3 16 #"char-lower-case?"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"length?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 54 #"                                                     ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 3 #") ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 67
(
 #"\"~s cannot be included in the sig"
 #"ma becuase it is the empty symbol\""
) 0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                           [("
0 0 14 3 3 #"and"
0 0 27 3 1 #" "
0 0 14 3 5 #"case?"
0 0 27 3 1 #" "
0 0 14 3 7 #"length?"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ["
0 0 14 3 5 #"case?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 46 #"\"~s must be of length 1 to be valid for sigma\""
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ["
0 0 14 3 7 #"length?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 44 #"\"~s must be lowercase to be valid for sigma\""
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 71
(
 #"\"~s must be completely lowercase and of length 1 to be valid for si"
 #"gma\""
) 0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 5 #")]))]"
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 43 #"\"~s must be a symbol to be valid for sigma\""
0 0 27 3 1 #" "
0 0 14 3 9 #"an-symbol"
0 0 27 3 5 #")]))]"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-sigma"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"valid-set?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-sigma"
0 0 27 3 1 #" "
0 0 14 3 16 #"valid-for-sigma?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"sigma"
0 0 27 3 5 #")])))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 9          61 23           0 0           0 9 0 14 3 11 #"Overarching"
0 0 27 3 1 #" "
0 0 14 3 7 #"Checks:"
0 0 27 3 1 #" "
0 0 14 3 5 #"rules"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";  valid-rule?"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";  valid-rules?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 62
#";valid-rules?: listof (listof symbols) --> true/listof strings"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 68
#";purpose: to see if a proposed set of rules is valid for the grammar"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"valid-rules?"
0 0 27 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 16 3 5 #"local"
0 0 27 3 2 #" ["
0 9          61 23           0 0           0 9 0 14 3 10 #"Repetition"
0 0 27 3 1 #" "
0 0 14 3 8 #"Handlers"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";   repeat-call"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";   no-repeats"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";   repetitions"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #" ("
0 0 14 3 18 #"return-repetitions"
0 0 27 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"no-repeats"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 11 #"repeat-call"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 9          73 23           0 0           0 11 0 14 3 6 #"Lenght"
0 0 27 3 1 #" "
0 0 14 3 8 #"Handlers"
0 0 27 29 1 #"\n"
0 0 18 3 16 #";  lenght-sorter"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";  length-check"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";  checkable-rules"
0 0 27 29 1 #"\n"
0 0 18 3 16 #";  length-errors"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                               "
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"checkable-rules"
0 0 27 3 1 #" "
0 0 14 3 10 #"no-repeats"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 9          49 23           0 0           0 7 0 14 3 6 #"Single"
0 0 27 3 1 #" "
0 0 14 3 4 #"Rule"
0 0 27 3 1 #" "
0 0 14 3 8 #"Handlers"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";   valid-rule?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"valid-rule?"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                    ("
0 0 16 3 5 #"local"
0 0 27 3 2 #" ["
0 9          49 23           0 0           0 7 0 14 3 9 #"Constants"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";   lhs"
0 0 27 29 1 #"\n"
0 0 18 3 9 #";   arrow"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";   rhs"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"arrow"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 2 #" ("
0 0 14 3 5 #"third"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 9          73 23           0 0           0 11 0 14 3 4 #"Left"
0 0 27 3 1 #" "
0 0 14 3 4 #"Hand"
0 0 27 3 1 #" "
0 0 14 3 4 #"Side"
0 0 27 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 27 29 1 #"\n"
0 0 18 3 20 #";   check-left-rg/cf"
0 0 27 29 1 #"\n"
0 0 18 3 17 #";   check-left-cs"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 41 #";check-left-rg/cf: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 53 #";purpose: check the validity of the lhs for rg and cf"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"check-left-rg/cf"
0 0 27 3 1 #" "
0 0 14 3 6 #"l-part"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 6 #"l-part"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 60
#"\"~s must be a symbol in V to be a valid lhs for the rule ~s\""
0 0 27 3 1 #" "
0 0 14 3 6 #"l-part"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 38 #";check-left-cs: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 46 #";purpose: check the validity of the lhs for cs"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"check-left-cs"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-part"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-part"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 54 #"                                                      "
0 0 18 3 42 #";inner-loop: string number --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 54 #"                                                      "
0 0 18 3 50 #";purpose: recurse to check each symbol is in sigma"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"inner-loop"
0 0 27 3 1 #" "
0 0 14 3 5 #"index"
0 0 27 3 1 #" "
0 0 14 3 9 #"terminal?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 5 #"index"
0 0 27 3 1 #" "
0 0 23 3 2 #"-1"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 64
#"                                                              [("
0 0 14 3 7 #"member?"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 27 3 2 #" ("
0 0 14 3 6 #"string"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 1 #" "
0 0 14 3 5 #"index"
0 0 27 3 6 #")))  ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 3 #")) "
0 0 18 3 29 #"; append sigma added by Marco"
0 0 27 29 1 #"\n"
0 0 27 3 64
#"                                                               ("
0 0 14 3 10 #"inner-loop"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 27 3 1 #" "
0 0 14 3 5 #"index"
0 0 27 3 2 #") "
0 0 14 3 5 #"false"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 63
#"                                                              ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 85
(
 #"\"~s must be constructed of symbols from V or sigma to be a valid rh"
 #"s for the rule ~s\""
) 0 0 27 29 1 #"\n"
0 0 27 3 76
(
 #"                                                                    "
 #"        "
) 0 0 14 3 3 #"rhs"
0 0 27 29 1 #"\n"
0 0 27 3 76
(
 #"                                                                    "
 #"        "
) 0 0 14 3 6 #"a-rule"
0 0 27 3 5 #")]))]"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 3 #")) "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"inner-loop"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 3 #")) "
0 0 14 3 5 #"false"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                )"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              )"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 9          37 23           0 0           0 5 0 14 3 6 #"Middle"
0 0 27 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 27 29 1 #"\n"
0 0 18 3 16 #";   check-middle"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 37 #";check-middle: symbol --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 41 #";purpose: check if the middle is an arrow"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"check-middle"
0 0 27 3 1 #" "
0 0 14 3 7 #"an-part"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 5 #"ARROW"
0 0 27 3 1 #" "
0 0 14 3 7 #"an-part"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 49 #"\"the second element in the rule ~s must be ARROW\""
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 9          85 23           0 0           0 13 0 14 3 5 #"Right"
0 0 27 3 1 #" "
0 0 14 3 4 #"Hand"
0 0 27 3 1 #" "
0 0 14 3 4 #"Side"
0 0 27 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 27 29 1 #"\n"
0 0 18 3 12 #";   rg-combo"
0 0 27 29 1 #"\n"
0 0 18 3 12 #";   cf-combo"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";   check-right"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 33 #";rg-combo: string --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 51 #";purpose: determine the validity of the type of rhs"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"rg-combo"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"the-length"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 10 #"the-length"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 65
#"                                                                ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 10 #"the-length"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 65
#"                                                                ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 27 3 2 #" ("
0 0 14 3 6 #"string"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 5 #"))) ("
0 0 14 3 6 #"remove"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 70
(
 #"                                                                    "
 #" ("
) 0 0 14 3 7 #"member?"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 27 3 2 #" ("
0 0 14 3 6 #"string"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 4 #"))) "
0 0 14 3 1 #"V"
0 0 27 3 5 #")))) "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                      [("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 2 #"~s"
0 0 20 3 1 #" "
0 0 20 3 4 #"must"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"symbol"
0 0 20 3 1 #" "
0 0 20 3 2 #"in"
0 0 20 3 1 #" "
0 0 20 3 76
(
 #"V or one symbol from sigma and one from V to be a valid rhs for the "
 #"rule ~s\""
) 0 0 27 29 1 #"\n"
0 0 27 3 86
(
 #"                                                                    "
 #"                  "
) 0 0 14 3 3 #"rhs"
0 0 27 29 1 #"\n"
0 0 27 3 86
(
 #"                                                                    "
 #"                  "
) 0 0 14 3 6 #"a-rule"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                      [("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 5 #"start"
0 0 27 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 27 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 2 #"~s"
0 0 20 3 1 #" "
0 0 20 3 4 #"must"
0 0 20 3 1 #" "
0 0 20 3 84
(
 #"not be the empty symbol if lhs is not the starting symbol for ~s to "
 #"be a valid rule\""
) 0 0 27 29 1 #"\n"
0 0 27 3 88
(
 #"                                                                    "
 #"                    "
) 0 0 14 3 3 #"rhs"
0 0 27 29 1 #"\n"
0 0 27 3 88
(
 #"                                                                    "
 #"                    "
) 0 0 14 3 6 #"a-rule"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 4 #"])))"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 32 #";cf-combo: string--> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 51 #";purpose: determine the validity of the type of rhs"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"cf-combo"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 2 #") "
0 0 18 3 78
(
 #"; Rewritten by Marco to handle the fsm generated symbols: <SYMBOL>-<"
 #"NUMBER>   "
) 0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 23 #"extract-fsm-cfg-symbols"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"is-digit?"
0 0 27 3 1 #" "
0 0 14 3 4 #"char"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 51 #"                                                  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 2 #">="
0 0 27 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 27 3 1 #" "
0 0 14 3 4 #"char"
0 0 27 3 2 #") "
0 0 23 3 2 #"48"
0 0 27 3 3 #") ("
0 0 14 3 2 #"<="
0 0 27 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 27 3 1 #" "
0 0 14 3 4 #"char"
0 0 27 3 2 #") "
0 0 23 3 2 #"57"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"get-num"
0 0 27 3 1 #" "
0 0 14 3 3 #"lst"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 51 #"                                                  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 3 #"lst"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 9 #"is-digit?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"lst"
0 0 27 3 5 #")))) "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 18 3 39 #"; if it is a digit add it to the result"
0 0 27 29 1 #"\n"
0 0 27 3 58
#"                                                         ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"lst"
0 0 27 3 3 #") ("
0 0 14 3 7 #"get-num"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"lst"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                      [("
0 0 14 3 16 #"char-lower-case?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                       ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")) ("
0 0 14 3 23 #"extract-fsm-cfg-symbols"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                      [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 16 #"char-upper-case?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #") "
0 0 23 3 3 #"#\\-"
0 0 27 3 5 #")))) "
0 0 18 3 28 #"; next elem is a single char"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                       ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")) ("
0 0 14 3 23 #"extract-fsm-cfg-symbols"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                      [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 16 #"char-upper-case?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #") "
0 0 23 3 3 #"#\\-"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 5 #")))) "
0 0 18 3 35 #"; next elem is of the type X-NUMBER"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                       ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 6 #"thenum"
0 0 27 3 2 #" ("
0 0 14 3 7 #"get-num"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 63
#"                                                              ("
0 0 14 3 7 #"newelem"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 3 #")) "
0 0 14 3 6 #"thenum"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 58
#"                                                         ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 7 #"newelem"
0 0 27 3 2 #" ("
0 0 14 3 23 #"extract-fsm-cfg-symbols"
0 0 27 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 7 #"newelem"
0 0 27 3 8 #")))))]))"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                          ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                     "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 54 #"                                                     ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 10 #"valid-list"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 11 #"rhs-as-list"
0 0 27 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 7 #"the-rhs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 9 #"extracted"
0 0 27 3 2 #" ("
0 0 14 3 23 #"extract-fsm-cfg-symbols"
0 0 27 3 1 #" "
0 0 14 3 11 #"rhs-as-list"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                            "
0 0 18 3 2 #";("
0 0 18 3 1 #"d"
0 0 18 3 2 #" ("
0 0 18 3 9 #"displayln"
0 0 18 3 2 #" ("
0 0 18 3 6 #"format"
0 0 18 3 1 #" "
0 0 18 3 36 #"\"Extracted symbols: ~s\" extracted)))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 11 #"the-symbols"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"lchar"
0 0 27 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 27 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 27 3 1 #" "
0 0 14 3 5 #"lchar"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 78
(
 #"                                                                    "
 #"          "
) 0 0 14 3 9 #"extracted"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 15 #"invalid-symbols"
0 0 27 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"s"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 1 #"s"
0 0 27 3 1 #" "
0 0 14 3 10 #"valid-list"
0 0 27 3 4 #"))) "
0 0 14 3 11 #"the-symbols"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                            "
0 0 18 3 2 #";("
0 0 18 3 2 #"dd"
0 0 18 3 2 #" ("
0 0 18 3 9 #"displayln"
0 0 18 3 2 #" ("
0 0 18 3 6 #"format"
0 0 18 3 1 #" "
0 0 18 3 48 #"\"The invalid symbols are: ~s\" invalid-symbols)))"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            )"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                       ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 15 #"invalid-symbols"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 59
#"                                                           "
0 0 23 3 2 #"#t"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"The"
0 0 20 3 1 #" "
0 0 20 3 7 #"symbols"
0 0 20 3 1 #" "
0 0 20 3 2 #"~s"
0 0 20 3 1 #" "
0 0 20 3 3 #"are"
0 0 20 3 1 #" "
0 0 20 3 3 #"not"
0 0 20 3 1 #" "
0 0 20 3 4 #"part"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"V"
0 0 20 3 1 #" "
0 0 20 3 10 #"or sigma.\""
0 0 27 3 1 #" "
0 0 14 3 15 #"invalid-symbols"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                         "
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 61
#";check-right: symbol (string --> true/string) --> true/string"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 49 #";purpose: to check the rhs of a rule for any type"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"check-right"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-part"
0 0 27 3 1 #" "
0 0 14 3 11 #"combination"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"symbol?"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-part"
0 0 27 3 3 #") ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 27 3 1 #" "
0 0 14 3 8 #"the-part"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 14 3 11 #"combination"
0 0 27 3 1 #" "
0 0 14 3 8 #"a-string"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 2 #"~s"
0 0 20 3 1 #" "
0 0 20 3 4 #"must"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 6 #"symbol"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 2 #"be"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 1 #" "
0 0 20 3 3 #"rhs"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 3 #"the"
0 0 20 3 9 #" rule ~s\""
0 0 27 3 1 #" "
0 0 14 3 8 #"the-part"
0 0 27 3 1 #" "
0 0 14 3 6 #"a-rule"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 53 #"                                                    )"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              )"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 9          73 23           0 0           0 11 0 14 3 11 #"Specialized"
0 0 27 3 1 #" "
0 0 14 3 4 #"Rule"
0 0 27 3 1 #" "
0 0 14 3 6 #"Checks"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";   valid-rule-rg?"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";   valid-rule-cf?"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";   valid-rule cs?"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 47 #";valid-rule-rg?: void --> true/(listof strings)"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 58
#";purpose: determine the validity of a regular grammar rule"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"valid-rule-rg?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 6 #"filter"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"check-left-rg/cf"
0 0 27 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 12 #"check-middle"
0 0 27 3 1 #" "
0 0 14 3 5 #"arrow"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 11 #"check-right"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 8 #"rg-combo"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              )"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 47 #";valid-rule-cf?: void --> true/(listof strings)"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 63
#";purpose: determine the validity of a context free grammar rule"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"valid-rule-cf?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 6 #"filter"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"check-left-rg/cf"
0 0 27 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 12 #"check-middle"
0 0 27 3 1 #" "
0 0 14 3 5 #"arrow"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 11 #"check-right"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 8 #"cf-combo"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              )"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 47 #";valid-rule-cs?: void --> true/(listof strings)"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                            "
0 0 18 3 68
#";purpose: determine the validity of a context sensitive grammar rule"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"valid-rule-cs?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 6 #"filter"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 13 #"check-left-cs"
0 0 27 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 12 #"check-middle"
0 0 27 3 1 #" "
0 0 14 3 5 #"arrow"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 61
#"                                                            ("
0 0 14 3 11 #"check-right"
0 0 27 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 27 3 1 #" "
0 0 14 3 8 #"cf-combo"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              )"
0 0 27 29 1 #"\n"
0 0 27 3 42 #"                                          "
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ]"
0 0 27 29 1 #"\n"
0 0 27 3 38 #"                                      "
0 9          73 23           0 0           0 11 0 14 3 4 #"Body"
0 0 27 3 1 #" "
0 0 14 3 2 #"of"
0 0 27 3 1 #" "
0 0 14 3 3 #"the"
0 0 27 3 1 #" "
0 0 14 3 6 #"single"
0 0 27 3 1 #" "
0 0 14 3 4 #"rule"
0 0 27 3 1 #" "
0 0 14 3 8 #"function"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 39 #"                                      ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"rg"
0 0 27 3 3 #") ("
0 0 14 3 14 #"valid-rule-rg?"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 46 #"                                            [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"cfg"
0 0 27 3 3 #") ("
0 0 14 3 14 #"valid-rule-cf?"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 46 #"                                            [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"csg"
0 0 27 3 3 #") ("
0 0 14 3 14 #"valid-rule-cs?"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 45 #"                                            ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 22 #"\"unknown grammar type\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                            )))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 9          49 23           0 0           0 7 0 14 3 5 #"Error"
0 0 27 3 1 #" "
0 0 14 3 8 #"Handlers"
0 0 27 29 1 #"\n"
0 0 18 3 15 #";   rule-errors"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";   all-errors"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 0 18 3 54 #";check-all-rules: listof rules --> true/listof strings"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                  "
0 0 18 3 29 #";purpose: check all the rules"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"check-all-rules"
0 0 27 3 1 #" "
0 0 14 3 11 #"given-rules"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 11 #"given-rules"
0 0 27 3 2 #") "
0 0 14 3 5 #"empty"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 11 #"valid-rule?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 11 #"given-rules"
0 0 27 3 4 #")) ("
0 0 14 3 15 #"check-all-rules"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 11 #"given-rules"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"rule-errors"
0 0 27 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 27 3 1 #" "
0 0 14 3 7 #"string?"
0 0 27 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 27 3 2 #" ("
0 0 14 3 15 #"check-all-rules"
0 0 27 3 1 #" "
0 0 14 3 15 #"checkable-rules"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"all-errors"
0 0 27 3 2 #" ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 2 #") "
0 0 14 3 11 #"rule-errors"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 60
#"                                                           ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"~s cannot be repeated in the rule list\""
0 0 27 3 1 #" "
0 0 14 3 11 #"repetitions"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 71
(
 #"                                                                    "
 #"   "
) 0 0 14 3 11 #"rule-errors"
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                                "
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ]"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                            "
0 9          61 23           0 0           0 9 0 14 3 4 #"Body"
0 0 27 3 1 #" "
0 0 14 3 2 #"of"
0 0 27 3 1 #" "
0 0 14 3 3 #"the"
0 0 27 3 1 #" "
0 0 14 3 10 #"multi-rule"
0 0 27 3 1 #" "
0 0 14 3 7 #"checker"
0           0 0 0 27 29 1 #"\n"
0 0 27 3 29 #"                            ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 10 #"all-errors"
0 0 27 3 2 #") "
0 0 23 3 2 #"#t"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 10 #"all-errors"
0 0 27 3 3 #"]))"
0 0 27 29 1 #"\n"
0 0 27 3 27 #"                          ]"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    )"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              )"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"base-errors"
0 0 27 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 12 #"valid-start?"
0 0 27 3 1 #" "
0 0 14 3 5 #"start"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 8 #"valid-V?"
0 0 27 3 1 #" "
0 0 14 3 1 #"V"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 12 #"valid-sigma?"
0 0 27 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 47 #"                                              ("
0 0 14 3 12 #"valid-rules?"
0 0 27 3 1 #" "
0 0 14 3 5 #"rules"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                              )))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 11 #"base-errors"
0 0 27 3 2 #") "
0 0 14 3 4 #"true"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 27 3 1 #" "
0 0 14 3 11 #"base-errors"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      )"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    )"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  )"
0           0
