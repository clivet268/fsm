#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 4869 0 17 3 25 #"; FSM Library Version 1.0"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Copyright (C) 2015 by Marco T. Morazan and Rosario Antunez"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Written by: Marco T. Morazan and Rosario Antunez, 2015"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"module"
0 0 24 3 1 #" "
0 0 14 3 3 #"fsm"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"fsa.rkt\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"cfg.rkt\""
0 0 24 3 2 #"  "
0 0 19 3 9 #"\"pda.rkt\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 21 #"\"regular-grammar.rkt\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"csg.rkt\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"tm.rkt\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 12 #"\"regexp.rkt\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"constants.rkt\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"word.rkt\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"misc.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 11 #"\"state.rkt\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"sm-getters.rkt\""
0 0 24 3 1 #" "
0 0 19 3 21 #"\"grammar-getters.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 23 #"\"grammar-predicate.rkt\""
0 0 24 3 1 #" "
0 0 19 3 23 #"\"machine-predicate.rkt\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"regexp-predicate.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 7 #"empties"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 17 #"; sm constructors"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 8 #"make-dfa"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-ndfa"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-ndpda"
0 0 24 3 1 #" "
0 0 14 3 7 #"make-tm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"regexp->fsa"
0 0 24 3 1 #" "
0 0 14 3 9 #"ndfa->dfa"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 16 #"sm-rename-states"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 8 #"sm-union"
0 0 24 3 1 #" "
0 0 14 3 9 #"sm-concat"
0 0 24 3 1 #" "
0 0 14 3 13 #"sm-kleenestar"
0 0 24 3 1 #" "
0 0 14 3 13 #"sm-complement"
0 0 24 3 1 #" "
0 0 14 3 15 #"sm-intersection"
0 0 24 3 1 #" "
0 0 14 3 11 #"grammar->sm"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 14 #"; sm observers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 18 #"sm-showtransitions"
0 0 24 3 1 #" "
0 0 14 3 7 #"sm-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 12 #"sm-getstates"
0 0 24 3 1 #" "
0 0 14 3 14 #"sm-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 11 #"sm-getrules"
0 0 24 3 1 #" "
0 0 14 3 12 #"sm-getfinals"
0 0 24 3 1 #" "
0 0 14 3 11 #"sm-getstart"
0 0 24 3 1 #" "
0 0 14 3 19 #"sm-getstackalphabet"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 12 #"; sm testers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 14 #"sm-sameresult?"
0 0 24 3 1 #" "
0 0 14 3 12 #"sm-testequiv"
0 0 24 3 1 #" "
0 0 14 3 7 #"sm-test"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 30 #"; ctm constructor and observer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"combine-tms"
0 0 24 3 1 #" "
0 0 14 3 7 #"ctm-run"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 22 #"; grammar constructors"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 7 #"make-rg"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-cfg"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-csg"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"sm->grammar"
0 0 24 3 1 #" "
0 0 14 3 18 #"grammar-rename-nts"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 13 #"grammar-union"
0 0 24 3 1 #" "
0 0 14 3 14 #"grammar-concat"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 19 #"; grammar observers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 15 #"grammar-gettype"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 14 #"grammar-getnts"
0 0 24 3 1 #" "
0 0 14 3 19 #"grammar-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 16 #"grammar-getrules"
0 0 24 3 1 #" "
0 0 14 3 16 #"grammar-getstart"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 16 #";grammar testers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 12 #"both-derive?"
0 0 24 3 1 #" "
0 0 14 3 17 #"grammar-testequiv"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-test"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 21 #"; regexp constructors"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 12 #"empty-regexp"
0 0 24 3 1 #" "
0 0 14 3 16 #"singleton-regexp"
0 0 24 3 1 #" "
0 0 14 3 12 #"union-regexp"
0 0 24 3 1 #" "
0 0 14 3 13 #"concat-regexp"
0 0 24 3 1 #" "
0 0 14 3 17 #"kleenestar-regexp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 18 #"; regexp observers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 15 #"simplify-regexp"
0 0 24 3 1 #" "
0 0 14 3 16 #"printable-regexp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 21 #"; regexp transformers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"fsa->regexp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 24 #"; some helpful functions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"los->symbol"
0 0 24 3 1 #" "
0 0 14 3 12 #"symbol->list"
0 0 24 3 1 #" "
0 0 14 3 15 #"generate-symbol"
0 0 24 3 1 #" "
0 0 14 3 14 #"symbol->fsmlos"
0 0 24 3 1 #" "
0 0 14 3 13 #"symbol-upcase"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; constants"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 4 #"DEAD"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #" "
0 0 14 3 2 #"LM"
0 0 24 3 1 #" "
0 0 14 3 5 #"BLANK"
0 0 24 3 1 #" "
0 0 14 3 6 #"BRANCH"
0 0 24 3 1 #" "
0 0 14 3 4 #"GOTO"
0 0 24 3 1 #" "
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #"; Primitive constructors imported from other modules"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #"; (listof state) fsm --> fsm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sm-rename-states"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"rename-states-fsa"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 17 #"rename-states-pda"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 16 #"tm-rename-states"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Incorrect input to sm-rename-states\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; fsm fsm --> fsm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Machines have different types: union-fsm\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"union-fsa"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 9 #"union-pda"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"tm-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 111
(
 #"\"Unknown/Invalid machine types as input to sm-union: first input is"
 #" of type ~s and second input is of type ~s.\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; fsm fsm --> fsm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sm-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"Machines have different types: concat-fsm\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"concat-fsa"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 10 #"concat-pda"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"tm-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 112
(
 #"\"Unknown/Invalid machine types as input to sm-concat: first input i"
 #"s of type ~s and second input is of type ~s.\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #"; fsm --> fsm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"sm-kleenestar"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"kleenestar-fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 14 #"kleenestar-pda"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 3 #") ("
0 0 14 3 13 #"tm-kleenestar"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 77
(
 #"\"Unknown/Invalid machine type as input to sm-kleenestar: input is o"
 #"f type ~s\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #"; fsm --> fsm or error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"sm-complement"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" (( "
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Cannot complement a pda\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"complement-fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 3 #") ("
0 0 14 3 13 #"tm-complement"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 77
(
 #"\"Unknown/Invalid machine type as input to sm-complement: input is o"
 #"f type ~s\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #"; sm sm --> sm or error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"sm-intersection"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"Machines have different types: intersection-fsm\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Cannot intersect two pdas\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 16 #"intersection-fsa"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"tm-intersection"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 118
(
 #"\"Unknown/Invalid machine types as input to sm-intersection: first i"
 #"nput is of type ~s and second input is of type ~s.\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; grammar --> sm "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grammar->sm"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"rg"
0 0 24 3 3 #") ("
0 0 14 3 7 #"rg->fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cfg"
0 0 24 3 3 #") ("
0 0 14 3 8 #"cfg->pda"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"csg"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 98
(
 #"\"Converting a Context-Sensitive Grammar to a Turing machine is not "
 #"yet implemented....stay tuned!\""
) 0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown grammar type\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 42 #"; fsm word [natnum] --> 'accept or 'reject"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"head"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"apply-fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 9 #"apply-pda"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"tm-apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Incorrect input to apply-fsm\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 48 #"; ctm word [natnum] --> (list state natnum tape)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ctm-run"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ctm-apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tmconfig-state"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #") ("
0 0 14 3 14 #"tmconfig-index"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #") ("
0 0 14 3 13 #"tmconfig-tape"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #"; fsm word [natnum] --> path"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"sm-showtransitions"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"head"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 20 #"show-transitions-fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 20 #"show-transitions-pda"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"tm-language-recognizer"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"tm-showtransitions"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Incorrect input to show-transitions\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #"; fsm fsm word --> boolean"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sm-sameresult?"
0 0 24 3 1 #" "
0 0 14 3 2 #"M1"
0 0 24 3 1 #" "
0 0 14 3 2 #"M2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"M1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"M2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 45 #"; fsm fsm [natnum] --> true or (listof words)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sm-testequiv"
0 0 24 3 2 #"  "
0 0 14 3 2 #"M1"
0 0 24 3 1 #" "
0 0 14 3 2 #"M2"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"number-tests"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 9 #"NUM-TESTS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"test-m1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"generate-words"
0 0 24 3 1 #" "
0 0 14 3 12 #"number-tests"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sm-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"M1"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"test-m2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"generate-words"
0 0 24 3 1 #" "
0 0 14 3 12 #"number-tests"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sm-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"M2"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"test-words"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 7 #"test-m1"
0 0 24 3 1 #" "
0 0 14 3 7 #"test-m2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"res-m1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"M1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 10 #"test-words"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"res-m2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"M2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 10 #"test-words"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"res-m1"
0 0 24 3 1 #" "
0 0 14 3 6 #"res-m2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-differences"
0 0 24 3 1 #" "
0 0 14 3 6 #"res-m1"
0 0 24 3 1 #" "
0 0 14 3 6 #"res-m2"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-words"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 45 #"; sm [natnum] --> (listof (list word symbol))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-test"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"numtests"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 9 #"NUM-TESTS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"test-fsa"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 8 #"test-pda"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"tm-test"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Incorrect input to test-fsm\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #";;; GRAMMARS"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; grammar --> fsm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sm->grammar"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sm-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"fsa->rg"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 82
(
 #"\"Converting a PDA to a Context-Free Grammar is not yet implemented."
 #"...stay tuned!\""
) 0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 98
(
 #"\"Converting a Turing machine to a Context-Sensitive Grammar is not "
 #"yet implemented....stay tuned!\""
) 0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Input is not a valid grammar.\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 37 #"; (listof symbol) grammar --> grammar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"grammar-rename-nts"
0 0 24 3 1 #" "
0 0 14 3 3 #"nts"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"rg"
0 0 24 3 3 #") ("
0 0 14 3 13 #"rg-rename-nts"
0 0 24 3 1 #" "
0 0 14 3 3 #"nts"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cfg"
0 0 24 3 3 #") ("
0 0 14 3 14 #"cfg-rename-nts"
0 0 24 3 1 #" "
0 0 14 3 3 #"nts"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"csg"
0 0 24 3 3 #") ("
0 0 14 3 14 #"csg-rename-nts"
0 0 24 3 1 #" "
0 0 14 3 3 #"nts"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"In grammar-rename-nts: Unknown grammar type\""
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 29 #"; grammar grammar --> grammar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"grammar-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"same-type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 9 #"same-type"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 58
#"\"grammar-union: the input grammars are not the same type.\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 2 #"m1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grammar->sm"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"m2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grammar->sm"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"newm"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ndfa->dfa"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"sm->grammar"
0 0 24 3 1 #" "
0 0 14 3 4 #"newm"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"cfg-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"csg-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown grammar type\""
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 29 #"; grammar grammar --> grammar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"same-type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"grammar-gettype"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 9 #"same-type"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"grammar-concat: the input grammars are not the same type.\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 2 #"m1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grammar->sm"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"m2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grammar->sm"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"newm"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ndfa->dfa"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sm-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"sm->grammar"
0 0 24 3 1 #" "
0 0 14 3 4 #"newm"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"cfg-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"csg-concat"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown grammar type\""
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 46 #"; grammar word -> derivation or \"Not a member\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"rg-derive"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 10 #"cfg-derive"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 10 #"csg-derive"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown grammar type\""
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #"; grammar grammar word --> boolean"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"both-derive?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"r2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 46 #"; grammar word -> derivation or \"Not a member\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grammar-test"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"numtests"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 9 #"NUM-TESTS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 7 #"test-rg"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 8 #"test-cfg"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 68
(
 #"\"test-grammar: A context-sensitive grammar must be tested manually."
 #"\""
) 0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown grammar type\""
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #"; grammar word -> (or true (listof word))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"grammar-testequiv"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"numtests"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 9 #"NUM-TESTS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"sigma1"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"rg-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"cfg-get-alphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 3 #") ("
0 0 14 3 12 #"csg-getsigma"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"sigma2"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"rg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"rg-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 3 #") ("
0 0 14 3 16 #"cfg-get-alphabet"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"csg?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 3 #") ("
0 0 14 3 12 #"csg-getsigma"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"testlist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"generate-words"
0 0 24 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 6 #"sigma1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 14 #"generate-words"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ceiling"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"numtests"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 6 #"sigma2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"res1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"testlist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"res2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 14 #"grammar-derive"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"testlist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"diffs"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-differences"
0 0 24 3 1 #" "
0 0 14 3 4 #"res1"
0 0 24 3 1 #" "
0 0 14 3 4 #"res2"
0 0 24 3 1 #" "
0 0 14 3 8 #"testlist"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"diffs"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"diffs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 32 #";new constructors with contracts"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 12 #"format-error"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 89
(
 #"; make-dfa: (listof state) alphabet state (listof state) (listof rul"
 #"e)) [symbol] --> dfsa"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dfa"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 1 #" "
0 0 14 3 6 #"deltas"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 7 #"adddead"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 35 #"\"the list of states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the sigma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 41 #"\"the list of final states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"deltas"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 95
(
 #"                                                                    "
 #"                          ("
) 0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"deltas"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"the rules ~s must be lists of length 3\""
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the delta must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #")  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-unchecked-dfa"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"            "
) 0 0 14 3 5 #"sigma"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"            "
) 0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"            "
) 0 0 14 3 6 #"finals"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"            "
) 0 0 14 3 6 #"deltas"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"            "
) 0 0 14 3 7 #"adddead"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"final-dfa"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-machine?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 9 #"final-dfa"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 9 #"final-dfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 72
(
 #"; make-ndfa: (listof states) alphabet state (listof state) (listof r"
 #"ule)"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 16 #";            -->"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 53 #";            (list-of symbol) [symbol] --> symbol OR "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#";                                           (list path symbol) OR"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";                                           (list-of rule)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-ndfa"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 1 #" "
0 0 14 3 6 #"deltas"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 7 #"adddead"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 35 #"\"the list of states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the sigma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 41 #"\"the list of final states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"deltas"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 95
(
 #"                                                                    "
 #"                          ("
) 0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"deltas"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"the rules ~s must be lists of length 3\""
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the delta must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #")  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-unchecked-ndfa"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"             "
) 0 0 14 3 5 #"sigma"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"             "
) 0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"             "
) 0 0 14 3 6 #"finals"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"             "
) 0 0 14 3 6 #"deltas"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"             "
) 0 0 14 3 7 #"adddead"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"final-ndfa"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-machine?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 10 #"final-ndfa"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 10 #"final-ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 97
(
 #"; make-ndpda: (listof states) alphabet alphabet state (listof states"
 #") (listof pdarules) --> ndpda"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ndpda"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 5 #"gamma"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 1 #" "
0 0 14 3 8 #"pdarules"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 7 #"adddead"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 35 #"\"the list of states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the sigma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"gma"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"gamma"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 26 #"\"the gamma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"finals"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 41 #"\"the list of final states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 49 #";correct-length?: rule --> boolean/listof strings"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 65
#";purpose: checks to see if the rule meets all lenght requirements"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"correct-length?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ["
0 0 17 3 32 #";check-list?: --> boolean/string"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 37 #";purpose: check if the rule is a list"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-list?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"the rule ~s cannot be empty\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"the rule ~s must be a two list of lists\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"the given rule ~s must be a two-list of lists\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 65
#";inner-length?: string, listof symbols, number --> boolean/string"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 65
#";purpose: checks that the left side of the rule is correct length"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-side"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 2 #") "
0 0 14 3 8 #"a-length"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"the ~s of the rule ~s must be a list of length ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-side"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-list?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"lhs\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"  ("
) 0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rhs\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 11 #")))))      "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 8 #"pdarules"
0 0 24 3 3 #") ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 15 #"correct-length?"
0 0 24 3 1 #" "
0 0 14 3 8 #"pdarules"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"the delta ~s must be a list\""
0 0 24 3 1 #" "
0 0 14 3 8 #"pdarules"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 1 #" "
0 0 14 3 3 #"gma"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #")  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-unchecked-ndpda"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"              "
) 0 0 14 3 5 #"sigma"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"              "
) 0 0 14 3 5 #"gamma"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"              "
) 0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"              "
) 0 0 14 3 6 #"finals"
0 0 24 29 1 #"\n"
0 0 24 3 82
(
 #"                                                                    "
 #"              "
) 0 0 14 3 8 #"pdarules"
0 0 24 29 1 #"\n"
0 0 24 3 84
(
 #"                                                                    "
 #"              ))"
) 0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-ndpda"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-machine?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-ndpda"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-ndpda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 9 #"tentative"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        )"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 116
(
 #";make-tm (listof state) (listof symbol) (listof (list state symbol) "
 #"(list state symbol)) (listof state) state --> tm"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-tm"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 14 3 5 #"SIGMA"
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 6 #"accept"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 35 #"\"the list of states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"SIGMA"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 34 #"\"the list of sigma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 41 #"\"the list of final states must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 49 #";correct-length?: rule --> boolean/listof strings"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 65
#";purpose: checks to see if the rule meets all lenght requirements"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"correct-length?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ["
0 0 17 3 32 #";check-list?: --> boolean/string"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 37 #";purpose: check if the rule is a list"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-list?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"the rule ~s cannot be empty\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"the rule ~s must be a two list of lists\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"the given rule ~s must be a list\""
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 56 #";inner-length?: string listof symbols --> boolean/string"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 65
#";purpose: checks that the left side of the rule is correct length"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-side"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-bit"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"the ~s of the rule ~s must be a list of length 2\""
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-side"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-list?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"outer-check"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"lhs\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"  ("
) 0 0 14 3 13 #"inner-length?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rhs\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 12 #"))))))      "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 13 #"compiled-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 3 #") ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 15 #"correct-length?"
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"the delta ~s must be a list of two-lists\""
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"sts"
0 0 24 3 1 #" "
0 0 14 3 3 #"srt"
0 0 24 3 1 #" "
0 0 14 3 3 #"sga"
0 0 24 3 1 #" "
0 0 14 3 3 #"fls"
0 0 24 3 1 #" "
0 0 14 3 3 #"dts"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"accept"
0 0 24 3 3 #") ("
0 0 14 3 17 #"make-unchecked-tm"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 14 3 5 #"SIGMA"
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 17 #"make-unchecked-tm"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 14 3 5 #"SIGMA"
0 0 24 3 1 #" "
0 0 14 3 5 #"delta"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 1 #" "
0 0 14 3 6 #"accept"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"final-tm"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-machine?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 8 #"final-tm"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 8 #"final-tm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #";grammar-lengths: V sigma R --> list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-lengths"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"vs"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 41 #"\"the list of nonterminals must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"sg"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 26 #"\"the sigma must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 126
(
 #"                                                                    "
 #"                                                         ("
) 0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 143
(
 #"                                                                    "
 #"                                                                    "
 #"       "
) 0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 104
(
 #"                                                                    "
 #"                                    "
) 0 0 14 3 1 #"R"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"the rules ~s must be lists of length 3\""
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 26 #"\"the delta must be a list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"vs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sg"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 10 #"error-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(make-cfg V sigma R S), where V and sigma are a (listof symbol), R"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 43 #"; is a (listof cfg-rule), and S is a symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cfg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-lengths"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-unchecked-cfg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-grammar?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 66
#";make-csg V sigma R S), where V and sigma are a (listof symbol), R"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 43 #"; is a (listof csg-rule), and S is a symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-csg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-lengths"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-unchecked-csg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-grammar?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 29 #";(make-rg N A R S), such that"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 73
(
 #"; N is a (listof symbol) (the non-terminals), A is a (listof symbol)"
 #" (the"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 71
(
 #"; alphabet), R is a (listof rrule), and S is a symbol (starting symb"
 #"ol)"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-rg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"grammar-lengths"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #") ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-unchecked-rg"
0 0 24 3 1 #" "
0 0 14 3 1 #"V"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 14 #"valid-grammar?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-error"
0 0 24 3 1 #" "
0 0 14 3 10 #"error-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"singleton-regexp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 24 #"make-unchecked-singleton"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-regexp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"concat-regexp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 21 #"make-unchecked-concat"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-regexp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"union-regexp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-unchecked-union"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-regexp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"kleenestar-regexp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-unchecked-kleenestar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 13 #"valid-regexp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tentative"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"tentative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-rg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"aK"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"K"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"bA"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"aB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"bC"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 14 3 1 #"S"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"G2"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-rg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"aA"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"ARROW"
0 0 24 3 1 #" "
0 0 14 3 2 #"aS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 14 3 1 #"S"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 2 #" ("
0 0 14 3 13 #"grammar-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"G2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 17 3 15 #"; closes module"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
