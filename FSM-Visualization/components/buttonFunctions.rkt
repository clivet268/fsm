#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 197 110 195 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 224 33 29 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 42 161 174 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 45 149 116 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 42 161 174 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 164 91 173 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 205 92 92 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 104 104 104 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 224 33 29 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 242 36 31 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 242 36 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 163 29 177 0 0 0 -1 -1 2
47 #"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 40 222 240 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 103 177 29 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 177 149 29 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 5468 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"Created by Joshua Schappel on 12/19/19"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"  This file contains all the functions associated with a button"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"net/sendurl"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"../structs/input.rkt\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"../structs/world.rkt\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"../structs/state.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 24 #"\"../structs/machine.rkt\""
0 0 24 3 1 #" "
0 0 19 3 21 #"\"../structs/posn.rkt\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"../globals.rkt\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"stateTransitions.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 26 #"\"../structs/msgWindow.rkt\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"../structs/world.rkt\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\"../../fsm-main.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 8 #"addState"
0 0 24 3 1 #" "
0 0 14 3 11 #"removeState"
0 0 24 3 1 #" "
0 0 14 3 7 #"addRule"
0 0 24 3 1 #" "
0 0 14 3 10 #"removeRule"
0 0 24 3 1 #" "
0 0 14 3 8 #"addStart"
0 0 24 3 1 #" "
0 0 14 3 12 #"replaceStart"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"addEnd"
0 0 24 3 1 #" "
0 0 14 3 6 #"rmvEnd"
0 0 24 3 1 #" "
0 0 14 3 8 #"addAlpha"
0 0 24 3 1 #" "
0 0 14 3 8 #"rmvAlpha"
0 0 24 3 1 #" "
0 0 14 3 8 #"addSigma"
0 0 24 3 1 #" "
0 0 14 3 10 #"clearSigma"
0 0 24 3 1 #" "
0 0 14 3 8 #"addGamma"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 8 #"rmvGamma"
0 0 24 3 1 #" "
0 0 14 3 20 #"getScrollBarPosition"
0 0 24 3 1 #" "
0 0 14 3 8 #"showNext"
0 0 24 3 1 #" "
0 0 14 3 8 #"showPrev"
0 0 24 3 1 #" "
0 0 14 3 14 #"scrollbarRight"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"scrollbarLeft"
0 0 24 3 1 #" "
0 0 14 3 13 #"NULL-FUNCTION"
0 0 24 3 1 #" "
0 0 14 3 8 #"openHelp"
0 0 24 3 1 #" "
0 0 14 3 8 #"send-url"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; ------- Button Functions -------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; addState: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; Purpose: Adds a state to the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addState"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 1 #"w"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 1 #"w"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fsm-state"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 93
(
 #"                                                                    "
 #"                         "
) 0 0 14 3 13 #"TRUE-FUNCTION"
0 0 24 29 1 #"\n"
0 0 24 3 94
(
 #"                                                                    "
 #"                         ("
) 0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 83
(
 #"                                                                    "
 #"              ("
) 0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; removeState: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Purpose: Removes a state from the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"removeState"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 17 3 45 #";; remove-all: list-of-rules -> list-of-rules"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 17 3 90
(
 #";; Purpose: Removes all rules from the machine that contain the curr"
 #"ent rule being removed"
) 0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                   ["
 #"("
) 0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                   ["
 #"("
) 0 0 14 3 6 #"equal?"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                     "
0 0 14 3 3 #"lor"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-cur-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #")))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #")))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; addRule: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; Purpose: Addes a rule to the world rule list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"addRule"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 10 #"input-list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"r2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"r3"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 25 #";; add-pda: NONE -> world"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 56 #";; Addds a pda rule to the world if all imputs are valid"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"add-pda"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"r4"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 2 #"r5"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                               "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                              "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #") "
0 0 14 3 2 #"r3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r4"
0 0 24 3 1 #" "
0 0 14 3 2 #"r5"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 25 #";; add-dfa: NONE -> world"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 64
#";; Adds a dfa/ndfa rule to the world if all the inputs are valid"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"add-dfa"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                          [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"  "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #") "
0 0 14 3 2 #"r3"
0 0 24 3 3 #") ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 35 #"))])))))                           "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-pda"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-dfa"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; removeRule: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; Purpose: Removes a world from the world list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"removeRule"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 10 #"input-list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"r2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"r3"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 25 #";; rmv-dfa: NONE -> world"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 92
(
 #";; Purpose: Removes a dfa/ndfa rule from the world as long as all in"
 #"put fields are filled in"
) 0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"rmv-dfa"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                             [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #") "
0 0 14 3 2 #"r3"
0 0 24 3 3 #") ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 25 #";; rmv-pda: NONE -> world"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 87
(
 #";; Purpose: Removes a pda rule from the world as long as all input f"
 #"ields are filled in"
) 0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"rmv-pda"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"r4"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 2 #"r5"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 8 #"list-set"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                   "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                  "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                 "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                             [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"r5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"format-input"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #") "
0 0 14 3 2 #"r3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r4"
0 0 24 3 1 #" "
0 0 14 3 2 #"r5"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 7 #"rmv-pda"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rmv-dfa"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; addState: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Purpose: Adds a start state to the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addStart"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       (("
0 0 14 3 11 #"start-state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 1 #"("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #"("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 19 #"machine-start-state"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 6 #")))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 24 #"set-machine-start-state!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                       [ ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 19 #"machine-start-state"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fsm-state"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #") "
0 0 14 3 13 #"TRUE-FUNCTION"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 24 #"set-machine-start-state!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                       [ ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 6 #")))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 24 #"set-machine-start-state!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; replaceStart: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; Purpose: Replaces the start state in the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"replaceStart"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           (("
0 0 14 3 11 #"start-state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 1 #"("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                           [ ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #")("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 24 #"set-machine-start-state!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fsm-state"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #") "
0 0 14 3 13 #"TRUE-FUNCTION"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"))  ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 24 #"set-machine-start-state!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 14 #"new-input-list"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; addEnd: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Purpose: Adds an end state to the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"addEnd"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 9 #"end-state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 5 #"))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 29 #"set-machine-final-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 24 #"machine-final-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 23 #"set-machine-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fsm-state"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 2 #") "
0 0 14 3 13 #"TRUE-FUNCTION"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 29 #"set-machine-final-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 24 #"machine-final-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; rmvEnd: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; Purpose: removes a end state from the world-final-state-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"rmvEnd"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 9 #"end-state"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 1 #"("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"fsm-state-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 5 #"))) ("
0 0 14 3 18 #"machine-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 29 #"set-machine-final-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 24 #"machine-final-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 29 #"set-machine-final-state-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-state"
0 0 24 3 3 #") ("
0 0 14 3 24 #"machine-final-state-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; addAlpha: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Purpose: Adds a letter to the worlds alpha-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addAlpha"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"input-value"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 18 #"machine-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 68
(
 #"\"You have reached the maximum amount of characters for the alphabet"
 #"\""
) 0 0 24 3 1 #" "
0 0 19 3 7 #"\"Error\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 23 #"set-machine-alpha-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 3 #") ("
0 0 14 3 18 #"machine-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))) "
0 0 14 3 8 #"symbol<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; rmvAlpha: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; Purpose: Removes a letter from the worlds alpha-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"rmvAlpha"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"input-value"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 52 #";; remove-all: list-of-rules symbol -> list-of-rules"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 87
(
 #";; Purpose: Removes all rules that are associated with the alpha tha"
 #"t is being removed."
) 0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 5 #"alpha"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                             [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"alpha"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 3 #"lor"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 23 #"set-machine-alpha-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 3 #") ("
0 0 14 3 18 #"machine-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"symbol<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 22 #"set-machine-rule-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 11 #"input-value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; addSigma: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; Purpose: adds a letter or group of letters to the sigma list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addSigma"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 11 #"input-value"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 47 #";; real-string->list: string -> list-of-symbols"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 114
(
 #";; Purpose: converts a string to a list. Unlike Racket's string->lis"
 #"t, this function converts every element of the"
) 0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 41 #";; list to a string as opposed to a char."
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 17 #"real-string->list"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 15 3 6 #"letrec"
0 0 24 3 2 #" ("
0 0 17 3 50 #";; convert-to-list: string list -> list-of-symbols"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                          "
0 0 17 3 108
(
 #";; Purpose: this function uses an accumulator to accumulate all elem"
 #"ents of the string converted to a list  "
) 0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"accum"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"           [("
) 0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"accum"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"           [("
) 0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 3 #") ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"accum"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 80
(
 #"                                                                    "
 #"           ["
) 0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 5 #"accum"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 54 #";; check-alpha: list-of-alpha list-of-sigma -> boolean"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 115
(
 #";; Purpose: Determins if all elements of sigma are in alpha. If they"
 #" are then returns true, otherwise retunrs false"
) 0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 11 #"check-alpha"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"loa"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 6 #"letrec"
0 0 24 3 2 #" ("
0 0 17 3 36 #";; check-lists: list list -> boolean"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 17 3 82
(
 #";; Purpose: given two list will check to see if the elements of list"
 #"2 are in list1"
) 0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 11 #"check-lists"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #" [("
) 0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #" [("
) 0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #") "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 70
(
 #"                                                                    "
 #" ["
) 0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-lists"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                               [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loa"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                               [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-lists"
0 0 24 3 1 #" "
0 0 14 3 3 #"loa"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 17 #"real-string->list"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"check-alpha"
0 0 24 3 2 #" ("
0 0 14 3 18 #"machine-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 10 #"sigma-list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 112
(
 #";; Check if the unprocessed list and processed lists are empty... If"
 #" they are we know run code was never pressed"
) 0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 129
(
 #";; If they are not empty then run code was pressed. If run code was "
 #"pressed then we know to update the gui to handle to new sigma"
) 0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 38 #";; so we will call run code from here."
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 23 #"set-machine-sigma-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"machine-sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 23 #"set-machine-sigma-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"machine-sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; clearSigma: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Purpose: Removes all elements of the sigma list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"clearSigma"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 23 #"set-machine-sigma-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; addGamma: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; Purpose: Adds a value to the machines gamma list (only needed for"
 #" pda)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addGamma"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"input-value"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 28 #"pda-machine-stack-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"You have reached the maximum amount of characters allowed\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Warning\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 33 #"set-pda-machine-stack-alpha-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 3 #") ("
0 0 14 3 28 #"pda-machine-stack-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))) "
0 0 14 3 8 #"symbol<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; rmvGamma world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; Purpose: Removes a value from the machines gamma list (only neede"
 #"d for pda)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"rmvGamma"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"input-value"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 12 #"textbox-text"
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"new-input-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-text"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 52 #";; remove-all: list-of-rules symbol -> list-of-rules"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 87
(
 #";; Purpose: Removes all rules that are associated with the alpha tha"
 #"t is being removed."
) 0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"remove-all"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 5 #"alpha"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                             [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"alpha"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 3 #"lor"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 33 #"set-pda-machine-stack-alpha-list!"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 11 #"input-value"
0 0 24 3 3 #") ("
0 0 14 3 28 #"pda-machine-stack-alpha-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"symbol<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 115
(
 #";;(set-machine-rule-list! (world-fsm-machine w) (remove-all (machine"
 #"-rule-list (world-fsm-machine w)) input-value))"
) 0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 28 #"create-new-world-input-empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-input-list"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; getScrollBarPosition: list-of-rules rule -> int"
0 0 24 29 1 #"\n"
0 0 17 3 141
(
 #";; Purpose: Trys to place the currently highlighted rule at the begi"
 #"nning of the scrollbar. If not possiable moves to scrollbar to a pos"
 #"ition"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";;      where the rule will be sceen by the user."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"getScrollBarPosition"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"ruleIndex"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"rule-num"
0 0 24 3 2 #" ("
0 0 14 3 21 #"determine-rule-number"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 17 3 84
(
 #";; See if there is no current rule. If so return the starting index "
 #"of the scrollbar"
) 0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 17 3 46 #";; If true then we set the scroll index to max"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"ruleIndex"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-num"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lor"
0 0 24 3 2 #") "
0 0 14 3 8 #"rule-num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 17 3 34 #";; Otherwise return the rule index"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 9 #"ruleIndex"
0 0 24 3 5 #"]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; showNext: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; Purpose: shows the next state that the machine is in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"showNext"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 31 #";; Check if sigma list is empty"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"machine-sigma-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))) ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 76
(
 #"\"Your Tape is currently empty! Please add variables to the Tap to c"
 #"ontinue.\""
) 0 0 24 3 1 #" "
0 0 19 3 8 #"\"Notice\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 77
(
 #";; Check if the unprocessed list is empty. If so then run was not ye"
 #"t pressed"
) 0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 85
(
 #"\"You must build your machine before you can continue. Please press "
 #"'Run' to proceed.\""
) 0 0 24 3 1 #" "
0 0 19 3 7 #"\"Error\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 6 #"letrec"
0 0 24 3 1 #"("
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"nextState"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 17 3 44 #";; The next state the machine transitions to"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 17 3 58
#";; Determins the the next transition based on machine type"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 20 #"determine-next-steps"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                          [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"accept"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"The input is accepted.\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Success\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-SUCCESS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                          [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"reject"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"The input is rejected.\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Notice\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                             [("
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 7 #"go-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                             [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 7 #"go-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 7 #")])])))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 17 3 32 #";; update-Machine: None -> world"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 17 3 47 #";; Updates the world based on the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 12 #"update-world"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                  [("
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 7 #"go-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                  [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 7 #"go-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                )"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"determine-next-steps"
0 0 24 3 8 #"))])])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; go-next: symbol world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; Determins the next state that the machine needs to be in an then "
 #"updates the world accordingly"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"go-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 11 #"transitions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 17 3 25 #";; The list-of-transitons"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 37 #";; determin-cur-state: none -> symbol"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 53 #";; Determins the current state that the machine is in"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 18 #"determin-cur-state"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   [("
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 28 #";; get-input: Rule -> symbol"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 51 #";; Purpose: determins the input from the given rule"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"get-input"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cur-rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"pda"
0 0 24 3 2 #")("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"accept"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"The input is accepted.\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Success\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-SUCCESS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"reject"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"The input is rejected.\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Notice\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 8 #"cur-rule"
0 0 24 3 2 #" ("
0 0 14 3 10 #"getCurRule"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"handle-pop"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"pop-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                  [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 8 #"pop-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 2 #"] "
0 0 17 3 37 #";; e is the element so nothing to pop"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"pop-stack"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"pop-list"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"handle-push"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"push-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 9 #"push-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 2 #"] "
0 0 17 3 38 #";; e is the element so nothing to push"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"push-stack"
0 0 24 3 1 #" "
0 0 14 3 9 #"push-list"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 49 #";; Determine if the tape input should increase   "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-input"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 21 #"set-tape-index-bottom"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 50 #";; If the machine is a pda we need to push or pop!"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 25 #";; pops are handled first"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"handle-pop"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"handle-push"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 21 #";;(println nextState)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"getCurRule"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 18 #"determin-cur-state"
0 0 24 3 3 #") ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"nextState"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 11 #"transitions"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 20 #"getScrollBarPosition"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"cur-rule"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; showPrev: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; shows the previous state that the machine was in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"showPrev"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 81
(
 #"\"The tape is currently empty. Please add variables to the tape, the"
 #"n press 'Run'\""
) 0 0 24 3 1 #" "
0 0 19 3 8 #"\"Notice\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))) ("
0 0 14 3 21 #"redraw-world-with-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 19 3 83
(
 #"\"You have reached the beginning of the machine! There are no more p"
 #"revious states.\""
) 0 0 24 3 1 #" "
0 0 19 3 8 #"\"Notice\""
0 0 24 3 1 #" "
0 0 14 3 11 #"MSG-CAUTION"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"letrec"
0 0 24 3 1 #"("
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 13 #"previousState"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"cur-rule"
0 0 24 3 2 #" ("
0 0 14 3 10 #"getCurRule"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 28 #";; get-input: Rule -> symbol"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 51 #";; Purpose: determins the input from the given rule"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"get-input"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cur-rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                             [("
0 0 14 3 3 #"pda"
0 0 24 3 2 #")("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                             [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 15 #"input-consumed?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                   [("
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 13 #"previousState"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 14 3 3 #"EMP"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                   [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"TODO HANDLE PREV\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ["
0 0 14 3 4 #"else"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 37 #";; determin-cur-state: none -> symbol"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 17 3 53 #";; Determins the current state that the machine is in"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 19 #"determin-prev-state"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                       [("
0 0 14 3 3 #"pda"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"previousState"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                       [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"TODO"
0 0 19 3 1 #" "
0 0 19 3 6 #"HANDLE"
0 0 19 3 5 #" PREV"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"previousState"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"handle-pop"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"pop-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 8 #"pop-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 2 #"] "
0 0 17 3 37 #";; e is the element so nothing to pop"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"pop-stack"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"pop-list"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 11 #"handle-push"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"push-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 8 #"cur-rule"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                 [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 9 #"push-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 2 #"] "
0 0 17 3 38 #";; e is the element so nothing to push"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 10 #"push-stack"
0 0 24 3 1 #" "
0 0 14 3 9 #"push-list"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 3 #";;("
0 0 17 3 7 #"println"
0 0 17 3 2 #" ("
0 0 17 3 9 #"get-input"
0 0 17 3 1 #" "
0 0 17 3 10 #"cur-rule))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"**********************"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 24 3 2 #" ("
0 0 14 3 15 #"input-consumed?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 46 #";; Determine if the tape input should decrease"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"EMP"
0 0 24 3 2 #" ("
0 0 14 3 15 #"input-consumed?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 3 2 #") "
0 0 17 3 35 #";; tape index can never go below -1"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 21 #"set-tape-index-bottom"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 17 #"TAPE-INDEX-BOTTOM"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 50 #";; If the machine is a pda we need to push or pop!"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 25 #";; pops are handled first"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 11 #"handle-push"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"handle-pop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 8 #"cur-rule"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 19 #"determin-prev-state"
0 0 24 3 3 #") ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 20 #"getScrollBarPosition"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"cur-rule"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; scrollbarRight: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Purpose: moves the scroll bar over 1 place to the right"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"scrollbarRight"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"rule-num"
0 0 24 3 2 #" ("
0 0 14 3 21 #"determine-rule-number"
0 0 24 3 1 #" "
0 0 14 3 12 #"MACHINE-TYPE"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                             [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"rule-num"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                             [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 2 #" ("
0 0 14 3 17 #"machine-rule-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"rule-num"
0 0 24 3 3 #") ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-cur-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; scrollbarLeft: world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; Purpose: moves the scroll bar over 1 place to the left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scrollbarLeft"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 22 #"world-scroll-bar-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                            [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-fsm-machine"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 19 #"world-tape-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-cur-rule"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-cur-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"world-button-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 16 #"world-input-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 27 #"world-processed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 29 #"world-unporcessed-config-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-error-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; oppenHelp; world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Purpose: opens the help link in an external browser window"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"openHelp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"send-url"
0 0 24 3 1 #" "
0 0 19 3 68
(
 #"\"https://github.com/jschappel/FSM-Visualization/blob/master/help.md"
 #"\""
) 0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; ------- Helper Functions -------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; determine-rule-number: symbol -> int"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Purpose: Determins the number of rules that can be displayed on t"
 #"he bottom"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"determine-rule-number"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"pda"
0 0 24 3 2 #") "
0 0 14 3 10 #"PDA_NUMBER"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"tm"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TODO\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 15 #"DFA-NDFA_NUMBER"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 37 #";; getCurRule: processed-list -> rule"
0 0 17 29 1 #"\n"
0 0 17 3 55 #";; Purpose: get the rule that the machine just executed"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 10 #"getCurRule"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 2 #"pl"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"                     "
0 0 17 29 1 #"\n"
0 0 17 3 22 #"                     ("
0 0 17 3 4 #"cond"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                       [("
0 0 17 3 1 #"<"
0 0 17 3 2 #" ("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"empty"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"empty"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"empty"
0 0 17 3 3 #")] "
0 0 17 3 89
(
 #";; If the processed list doesn't have at least 2 items in it then no"
 #" rule was followed..."
) 0 0 17 29 1 #"\n"
0 0 17 3 25 #"                       [("
0 0 17 3 1 #"="
0 0 17 3 2 #" ("
0 0 17 3 6 #"length"
0 0 17 3 2 #" ("
0 0 17 3 4 #"caar"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 4 #")) ("
0 0 17 3 6 #"length"
0 0 17 3 2 #" ("
0 0 17 3 5 #"caadr"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 3 #")))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                        ("
0 0 17 3 4 #"list"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                         ("
0 0 17 3 6 #"cadadr"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                         "
0 0 17 3 3 #"EMP"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                         ("
0 0 17 3 5 #"cadar"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 3 #"))]"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                       ["
0 0 17 3 4 #"else"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                        ("
0 0 17 3 4 #"list"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                         ("
0 0 17 3 6 #"cadadr"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                         ("
0 0 17 3 6 #"caaadr"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                         ("
0 0 17 3 5 #"cadar"
0 0 17 3 1 #" "
0 0 17 3 2 #"pl"
0 0 17 3 6 #"))])))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; format-input: symbol -> symbol"
0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #";; Purpose: This is a helper function for addRule and removeRule tha"
 #"t formats certine symbols into valid fsm symbols"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";; EX: 'DEAD will become 'ds"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"format-input"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 4 #"DEAD"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ds"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"EMP"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; reset-bottom-indices: none -> none"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; Purpose: Resest the bottom indicies to there origional value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"reset-bottom-indices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"set-tape-index-bottom"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"set-init-index-bottom"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; THIS FUNCTION IS JUST A PLACEHOLDER"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"NULL-FUNCTION"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 12 #"redraw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0           0
