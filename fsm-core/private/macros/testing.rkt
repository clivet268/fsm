#lang fsm
(require "constructors.rkt"
         "../constants.rkt")
(local-require test-engine/racket-tests)

(define dfa1 (make-ndfa2 '(A B C)
                       '(a b c)
                       'a
                       '(B C D)
                       '((A b D)
                         (A a c)
                         (B 1 B)
                         (B a c))))

(define tm2 (make-tm2 '(S Y N)
                     `(a b)
                     `(((S a) (S ,RIGHT))
                       ((S b) (N b))
                       ((S ,BLANK) (Y ,BLANK)))
                     'S
                     '(Y M)
                     'Y))

(define ndpda1 (make-ndpda2 '(S M F)
                           '(a b)
                           '(a)
                           '(S-1)
                           '(F)
                           `(((S ,EMP ,EMP) (M ,EMP))
                             ((S a ,EMP) (S (a)))
                             ((M b (a)) (M ,EMP))
                             ((M ,EMP ,EMP) (F ,EMP)))))



(make-dfa2 '(A B C D)
           '(a b c d)
           'A
           '(B C)
           `((A b C)
             (A c D)
             (B c D)
             (B a B))
           #t)

(define anbncn (make-tm2 '(S A B C D E F G H I J K L Y)
                        '(a b c x)
                        `(((S ,BLANK) (J ,RIGHT))
                          ((J ,BLANK) (Y ,BLANK))
                          ((J a) (A ,RIGHT))
                          ((A a) (A ,RIGHT))
                          ((A b) (B ,RIGHT))
                          ((B b) (B ,RIGHT))
                          ((B c) (C ,RIGHT))
                          ((C c) (C ,RIGHT))
                          ((C ,BLANK) (D ,LEFT))
                          ((D a) (D ,LEFT))
                          ((D b) (D ,LEFT))
                          ((D c) (D ,LEFT))
                          ((D x) (D ,LEFT))
                          ((D ,BLANK) (E ,RIGHT))
                          ((E x) (E ,RIGHT))
                          ((E a) (F x))
                          ((E a) (H x))
                          ((F a) (F ,RIGHT))
                          ((F b) (G x))
                          ((F x) (F ,RIGHT))
                          ((G b) (G ,RIGHT))
                          ((G x) (G ,RIGHT))
                          ((G c) (D x))
                          ((H x) (H ,RIGHT))
                          ((H b) (I x))
                          ((I x) (I ,RIGHT))
                          ((I c) (K x))            
                          ((K x) (L ,RIGHT))  
                          ((L ,BLANK) (Y ,BLANK)))     
                        'S
                        '(Y)
                        'Y
                        #:accepts `((,LM ,BLANK a b c)) 
                        #:rejects '((a b c c))))